//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input Settings/CameraInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInputActions"",
    ""maps"": [
        {
            ""name"": ""CameraControlMap"",
            ""id"": ""8b1b7ae4-aee4-4928-ba06-a7c403624dab"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e5794c34-e499-4938-874d-1e84f5e21f1e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""f7f65cb1-3f17-426a-9387-990e4fab00fc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""54c33ad6-881d-4992-a4e4-5524b008dd17"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""19ae7ca7-e192-49ae-a241-397f8cbdc93a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b825433f-5e26-4f0d-9e8c-c7024d52a176"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1c796b63-f0e3-4fa1-a92c-46a9d6ed8525"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5d3f21d7-4954-47e1-aacd-eaee4ac86840"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8703b1b0-e322-4079-bf03-ecaa421fd81a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0c0d8c82-9928-48ce-9b14-ed26b09c0dc7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01119e22-4089-4c5d-8624-a7039b5e1128"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraControlMap
        m_CameraControlMap = asset.FindActionMap("CameraControlMap", throwIfNotFound: true);
        m_CameraControlMap_Movement = m_CameraControlMap.FindAction("Movement", throwIfNotFound: true);
        m_CameraControlMap_Rotation = m_CameraControlMap.FindAction("Rotation", throwIfNotFound: true);
        m_CameraControlMap_Zoom = m_CameraControlMap.FindAction("Zoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraControlMap
    private readonly InputActionMap m_CameraControlMap;
    private ICameraControlMapActions m_CameraControlMapActionsCallbackInterface;
    private readonly InputAction m_CameraControlMap_Movement;
    private readonly InputAction m_CameraControlMap_Rotation;
    private readonly InputAction m_CameraControlMap_Zoom;
    public struct CameraControlMapActions
    {
        private @CameraInputActions m_Wrapper;
        public CameraControlMapActions(@CameraInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CameraControlMap_Movement;
        public InputAction @Rotation => m_Wrapper.m_CameraControlMap_Rotation;
        public InputAction @Zoom => m_Wrapper.m_CameraControlMap_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_CameraControlMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlMapActions set) { return set.Get(); }
        public void SetCallbacks(ICameraControlMapActions instance)
        {
            if (m_Wrapper.m_CameraControlMapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CameraControlMapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CameraControlMapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CameraControlMapActionsCallbackInterface.OnMovement;
                @Rotation.started -= m_Wrapper.m_CameraControlMapActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_CameraControlMapActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_CameraControlMapActionsCallbackInterface.OnRotation;
                @Zoom.started -= m_Wrapper.m_CameraControlMapActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CameraControlMapActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CameraControlMapActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_CameraControlMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public CameraControlMapActions @CameraControlMap => new CameraControlMapActions(this);
    public interface ICameraControlMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
}
